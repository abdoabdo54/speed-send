services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: gmail_saas_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-gmailsaas}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-gmailsaas123}
      POSTGRES_DB: ${POSTGRES_DB:-gmail_saas}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gmailsaas"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Celery
  redis:
    image: redis:7-alpine
    container_name: gmail_saas_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gmail_saas_backend
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-gmailsaas}:${POSTGRES_PASSWORD:-gmailsaas123}@postgres:5432/${POSTGRES_DB:-gmail_saas}
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your-encryption-key-32-bytes-long}
      ENVIRONMENT: ${ENVIRONMENT:-development}
    volumes:
      - ./backend:/app
      - service_accounts:/app/service_accounts
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker (PowerMTA Mode - High Concurrency)
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gmail_saas_celery_worker
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-gmailsaas}:${POSTGRES_PASSWORD:-gmailsaas123}@postgres:5432/${POSTGRES_DB:-gmail_saas}
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your-encryption-key-32-bytes-long}
      ENVIRONMENT: ${ENVIRONMENT:-development}
    volumes:
      - ./backend:/app
      - service_accounts:/app/service_accounts
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # PowerMTA Mode: High concurrency for instant parallel sending
    # Each worker handles multiple senders simultaneously
    command: celery -A app.celery_app worker --loglevel=info --concurrency=100 --pool=threads

  # Celery Beat (for scheduled tasks)
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gmail_saas_celery_beat
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-gmailsaas}:${POSTGRES_PASSWORD:-gmailsaas123}@postgres:5432/${POSTGRES_DB:-gmail_saas}
      REDIS_URL: redis://redis:6379/0
      SECRET_KEY: ${SECRET_KEY:-your-secret-key-change-in-production}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-your-encryption-key-32-bytes-long}
    volumes:
      - ./backend:/app
      - service_accounts:/app/service_accounts
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: celery -A app.celery_app beat --loglevel=info

  # Frontend (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: gmail_saas_frontend
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - backend
    command: npm run dev

volumes:
  postgres_data:
  redis_data:
  service_accounts:

